// ReviewService.swift

import Foundation
import StoreKit
import SwiftUI

@MainActor
class ReviewService: ObservableObject {
    static let shared = ReviewService()
    
    // Keys para UserDefaults
    private let completedPomodorosKey = "completedPomodorosForReview"
    private let lastReviewRequestDateKey = "lastReviewRequestDate"
    private let hasRequestedReviewKey = "hasRequestedReview"
    private let appFirstLaunchDateKey = "appFirstLaunchDate"
    private let totalSessionsKey = "totalSessionsCompleted"
    
    // Configuraci칩n de cu치ndo pedir rese침as
    private let pomodorosForFirstRequest = 10  // Despu칠s de 10 pomodoros completados
    private let pomodorosForSubsequentRequests = 50  // Cada 50 pomodoros despu칠s
    private let minimumDaysBetweenRequests = 60  // No pedir m치s de una vez cada 2 meses
    private let minimumDaysAfterInstall = 3  // Esperar al menos 3 d칤as despu칠s de la instalaci칩n
    
    @AppStorage("completedPomodorosForReview") private var completedPomodoros = 0
    @AppStorage("lastReviewRequestDate") private var lastReviewRequestTimestamp: Double = 0
    @AppStorage("hasRequestedReview") private var hasRequestedReview = false
    @AppStorage("appFirstLaunchDate") private var firstLaunchTimestamp: Double = 0
    @AppStorage("totalSessionsCompleted") private var totalSessions = 0
    
    init() {
        // Registrar primera ejecuci칩n si es necesario
        if firstLaunchTimestamp == 0 {
            firstLaunchTimestamp = Date().timeIntervalSince1970
        }
    }
    
    /// Registra un pomodoro completado y verifica si es momento de pedir una rese침a
    func recordCompletedPomodoro() {
        completedPomodoros += 1
        totalSessions += 1
        
        // Verificar si debemos solicitar una rese침a
        checkAndRequestReviewIfAppropriate()
    }
    
    /// Verifica las condiciones y solicita una rese침a si es apropiado
    private func checkAndRequestReviewIfAppropriate() {
        // Verificar que hayan pasado suficientes d칤as desde la instalaci칩n
        let daysSinceInstall = daysSince(timestamp: firstLaunchTimestamp)
        guard daysSinceInstall >= minimumDaysAfterInstall else {
            print("游닇 Review: Esperando m치s tiempo desde la instalaci칩n (\(daysSinceInstall) d칤as)")
            return
        }
        
        // Verificar que hayan pasado suficientes d칤as desde la 칰ltima solicitud
        if lastReviewRequestTimestamp > 0 {
            let daysSinceLastRequest = daysSince(timestamp: lastReviewRequestTimestamp)
            guard daysSinceLastRequest >= minimumDaysBetweenRequests else {
                print("游닇 Review: Esperando m치s tiempo desde la 칰ltima solicitud (\(daysSinceLastRequest) d칤as)")
                return
            }
        }
        
        // Determinar el umbral de pomodoros necesarios
        let threshold = hasRequestedReview ? pomodorosForSubsequentRequests : pomodorosForFirstRequest
        
        // Verificar si hemos alcanzado el umbral
        if completedPomodoros >= threshold {
            requestReview()
            
            // Resetear contador y actualizar timestamp
            completedPomodoros = 0
            lastReviewRequestTimestamp = Date().timeIntervalSince1970
            hasRequestedReview = true
        }
    }
    
    /// Solicita una rese침a usando el API nativo de iOS
    func requestReview() {
        // Usar un peque침o delay para no interrumpir la experiencia del usuario
        Task {
            try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 segundos
            
            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
                SKStoreReviewController.requestReview(in: scene)
                print("游닇 Review: Solicitando rese침a al usuario")
            }
        }
    }
    
    /// Solicitud manual de rese침a (desde Quick Actions o Settings)
    func requestManualReview() {
        if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            SKStoreReviewController.requestReview(in: scene)
        }
    }
    
    /// Abre directamente la p치gina de rese침as en App Store
    func openAppStoreForReview() {
        // ID real de tu app Pomo en App Store
        let appStoreURL = "https://apps.apple.com/app/id6739268564?action=write-review"
        
        if let url = URL(string: appStoreURL) {
            UIApplication.shared.open(url)
        }
    }
    
    // Helper para calcular d칤as transcurridos
    private func daysSince(timestamp: Double) -> Int {
        let date = Date(timeIntervalSince1970: timestamp)
        let days = Calendar.current.dateComponents([.day], from: date, to: Date()).day ?? 0
        return days
    }
    
    // Estad칤sticas para debug (opcional)
    var debugStats: String {
        """
        游늵 Review Service Stats:
        - Pomodoros completados (para review): \(completedPomodoros)
        - Total de sesiones: \(totalSessions)
        - D칤as desde instalaci칩n: \(daysSince(timestamp: firstLaunchTimestamp))
        - D칤as desde 칰ltima solicitud: \(lastReviewRequestTimestamp > 0 ? "\(daysSince(timestamp: lastReviewRequestTimestamp))" : "Nunca")
        - Ha solicitado rese침a: \(hasRequestedReview ? "S칤" : "No")
        - Pr칩xima solicitud en: \(hasRequestedReview ? "\(pomodorosForSubsequentRequests - completedPomodoros)" : "\(pomodorosForFirstRequest - completedPomodoros)") pomodoros
        """
    }
}
